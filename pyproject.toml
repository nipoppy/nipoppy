[build-system]
build-backend = "hatchling.build"
requires = ["hatch-vcs", "hatchling"]

[project]
authors = [{ name = "Nipoppy developpers" }]
classifiers = [
    "Intended Audience :: Developers",
    "Intended Audience :: Science/Research",
    "License :: OSI Approved",
    "Operating System :: POSIX",
    "Operating System :: Unix",
    "Programming Language :: Python",
    "Topic :: Scientific/Engineering",
    "Topic :: Software Development",
]
dependencies = [
    "boutiques>=0.5.30",
    "click",
    "httpx",
    "jinja2",
    "pandas",
    "pybids!=0.18.0",
    "pydantic",
    "pydicom!=3.0.0",
    "pysqa[sge]>=0.2.4",
    "requests",
    "rich",
    "rich-click",
    "typing-extensions",
]
description = "Standardized organization and processing of neuroimaging-clinical datasets"
license = { file = "LICENSE" }
name = "nipoppy"
readme = "README.md"
requires-python = ">=3.9"
dynamic = ["version"]

[project.optional-dependencies]
parallel = ["joblib"]
doc = [
    "furo",
    "mdit-py-plugins",
    "myst-parser",
    "sphinx",
    "sphinx-autoapi",
    "sphinx-click",
    "sphinx-copybutton",
    "sphinx-github-changelog",
    "sphinx-hoverxref",
    "sphinx-jsonschema",
    "sphinx-togglebutton",
    "sphinx_design",
]
dev = ["nipoppy[doc,test]", "pre-commit"]
test = [
    "fids>=0.1.0",
    "nipoppy[gui,parallel]",
    "packaging",
    "pytest-cov",
    "pytest-httpx",
    "pytest-mock",
    "pytest-xdist",
    "pytest>=6.0.0",
]
tests = ["nipoppy[test]"] # alias in case of typo
tui = ["trogon"]
gui = ["nipoppy[tui]"] # alias for TUI

[project.scripts]
nipoppy = "nipoppy.cli.cli:cli"
nipoppy-gui = "nipoppy.cli.cli:tui_launch"

[tool.hatch.build.targets.wheel]
packages = ["nipoppy"]

[tool.hatch.metadata]
allow-direct-references = true

[tool.hatch.build.hooks.vcs]
version-file = "nipoppy/_version.py"

[tool.hatch.version]
source = "vcs"

[tool.codespell]
skip = '.git,.github,pyproject.toml'

[tool.pytest.ini_options]
addopts = "--color=yes -n auto --dist loadfile -ra -q -vv"
testpaths = ["tests/"]
minversion = "6.0"
xfail_strict = true
markers = [
    "api: mark a test as an api test.",
    "no_xdist: mark a test that should not be run with xdist in CI.",
]

[tool.coverage.report]
# Preserves the "pragma: no cover" and skip functions decorated with "@abstractmethod"
# More info at: https://coverage.readthedocs.io/en/latest/config.html#report-exclude-also
exclude_also = ["@abstractmethod"]
